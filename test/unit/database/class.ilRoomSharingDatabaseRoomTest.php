<?php

chdir("../../../../../../../../"); // necessary for the include paths that are used within the classes to be tested
require_once("Customizing/global/plugins/Services/Repository/RepositoryObject/RoomSharing/classes/database/class.ilRoomSharingDatabaseRoom.php");
require_once("Customizing/global/plugins/Services/Repository/RepositoryObject/RoomSharing/classes/database/class.ilRoomSharingDBConstants.php");
require_once("Services/Database/classes/class.ilDBMySQL.php");

use ilRoomSharingDBConstants as dbc;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-12 at 09:19:15.
 * @author Robert Heimsoth <rheimsoth@stud.hs-bremen.de>
 * @group unit
 */
class ilRoomSharingDatabaseRoomTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var ilRoomSharingDatabaseRoom
	 */
	private static $roomDb;
	private static $pool_id = 30;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$test = new ilRoomSharingDatabaseRoomTest();
		global $ilDB;
//		$ilDB = $test->getMockBuilder('ilDBMySQL')
//				->setMethods(array())
//				->disableOriginalConstructor()->getMock();
		$ilDB = $test->getMock('db',
			array('quote', 'query', 'fetchAssoc', 'in', 'prepare', 'execute', 'insert', 'nextId', 'getLastInsertId',
			'update', 'manipulate'), array(), '', false);
		self::$roomDb = new ilRoomSharingDatabaseRoom(self::$pool_id);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getMaxSeatCount
	 */
	public function testGetMaxSeatCount()
	{
		global $ilDB;
		$expected = 'SELECT MAX(max_alloc) AS value FROM ' .
			dbc::ROOMS_TABLE . ' WHERE pool_id = ' .
			$ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getMaxSeatCount();
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getRoomIdsWithMatchingAttribute
	 */
	public function testGetRoomIdsWithMatchingAttribute()
	{
		global $ilDB;
		$expected = 'SELECT room_id FROM ' . dbc::ROOM_TO_ATTRIBUTE_TABLE . ' ra ' .
			'LEFT JOIN ' . dbc::ROOM_ATTRIBUTES_TABLE .
			' attr ON ra.att_id = attr.id WHERE name = ' . $ilDB->quote("testattribute", 'text') .
			' AND count >= ' . $ilDB->quote(35, 'integer') .
			' AND pool_id = ' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getRoomIdsWithMatchingAttribute("testattribute", 35);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getAllRoomIds
	 */
	public function testGetAllRoomIds()
	{
		global $ilDB;
		$expected = 'SELECT id FROM ' . dbc::ROOMS_TABLE . ' WHERE pool_id = ' .
			$ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getAllRoomIds();
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getAllRooms
	 */
	public function testGetAllRooms()
	{
		global $ilDB;
		$expected = 'SELECT * FROM ' . dbc::ROOMS_TABLE . ' WHERE pool_id = ' .
			$ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getAllRooms();
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getAllRoomNames
	 */
	public function testGetAllRoomNames()
	{
		global $ilDB;
		$expected = 'SELECT name FROM ' . dbc::ROOMS_TABLE . ' WHERE pool_id = ' .
			$ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getAllRoomNames();
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getMatchingRooms
	 */
	public function testGetMatchingRooms()
	{
		global $ilDB;
		$expected = 'SELECT room.id, name, max_alloc FROM ' .
			dbc::ROOMS_TABLE . ' room WHERE ' .
			$ilDB->in("room.id", array(2, 3, 4)) . ' AND room.pool_id = ' . $ilDB->quote(self::$pool_id,
				'integer') . ' ' .
			' ORDER BY name';
		$ilDB->expects($this->once())->method('prepare')->with($this->equalTo($expected));
		self::$roomDb->getMatchingRooms(array(2 => "R1", 3 => "R2", 4 => "R3"), null, null);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getRoomName
	 */
	public function testGetRoomName()
	{
		global $ilDB;
		$expected = 'SELECT name FROM ' . dbc::ROOMS_TABLE .
			' WHERE id = ' . $ilDB->quote(35, 'integer') .
			' AND pool_id =' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getRoomName(35);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getRoomWithName
	 */
	public function testGetRoomWithName()
	{
		global $ilDB;
		$expected = 'SELECT * FROM ' . dbc::ROOMS_TABLE .
			' WHERE name = ' . $ilDB->quote("testname", 'text') .
			' AND pool_id =' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getRoomWithName("testname");
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getRoomsBookedInDateTimeRange
	 * @todo   Implement testGetRoomsBookedInDateTimeRange().
	 */
	public function testGetRoomsBookedInDateTimeRange()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getAllRoomIdsWhereSeatsAvailable
	 */
	public function testGetAllRoomIdsWhereSeatsAvailable()
	{
		global $ilDB;
		$expected = 'SELECT id FROM ' . dbc::ROOMS_TABLE . ' WHERE pool_id = ' .
			$ilDB->quote(self::$pool_id, 'integer') . ' AND max_alloc >= ' .
			$ilDB->quote(25, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getAllRoomIdsWhereSeatsAvailable(25);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getRoomsWithFloorplan
	 */
	public function testGetRoomsWithFloorplan()
	{
		global $ilDB;
		$expected = 'SELECT name FROM ' . dbc::ROOMS_TABLE .
			' WHERE file_id = ' . $ilDB->quote(25, 'integer') .
			' AND pool_id =' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getRoomsWithFloorplan(25);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::getRoom
	 */
	public function testGetRoom()
	{
		global $ilDB;
		$expected = 'SELECT * FROM ' . dbc::ROOMS_TABLE . ' WHERE id = ' .
			$ilDB->quote(25, 'integer') .
			' AND pool_id =' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$roomDb->getRoom(25);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::insertRoom
	 */
	public function testInsertRoom()
	{
		global $ilDB;
		$ilDB->method('nextId')->willReturn(333);
		$expected = array(
			'id' => array('integer', 333),
			'name' => array('text', "testname"),
			'type' => array('text', "testtype"),
			'min_alloc' => array('integer', 23),
			'max_alloc' => array('integer', 24),
			'file_id' => array('integer', 25),
			'building_id' => array('integer', 26),
			'pool_id' => array('integer', self::$pool_id));
		$ilDB->expects($this->once())->method('insert')->with($this->equalTo(dbc::ROOMS_TABLE),
			$this->equalTo($expected));

		self::$roomDb->insertRoom("testname", "testtype", 23, 24, 25, 26);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::updateRoomProperties
	 */
	public function testUpdateRoomProperties()
	{
		global $ilDB;
		$expected_fields = array(
			"name" => array("text", "testname"),
			"type" => array("text", "testtype"),
			"min_alloc" => array("integer", 23),
			"max_alloc" => array("integer", 24),
			"file_id" => array("integer", 25),
			"building_id" => array("integer", 26)
		);
		$expected_where = array(
			"id" => array("integer", 22),
			"pool_id" => array("integer", self::$pool_id)
		);
		$ilDB->expects($this->once())->method('update')->with($this->equalTo(dbc::ROOMS_TABLE),
			$this->equalTo($expected_fields), $this->equalTo($expected_where));

		self::$roomDb->updateRoomProperties(22, "testname", "testtype", 23, 24, 25, 26);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::deleteRoom
	 */
	public function testDeleteRoom()
	{
		global $ilDB;
		$expected = 'DELETE FROM ' . dbc::ROOMS_TABLE .
			' WHERE id = ' . $ilDB->quote(25, 'integer') .
			' AND pool_id =' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('manipulate')->with($this->equalTo($expected));
		self::$roomDb->deleteRoom(25);
	}

	/**
	 * @covers ilRoomSharingDatabaseRoom::setPoolId
	 */
	public function testSetPoolId()
	{
		self::$roomDb->setPoolId(22222);
		$this->assertEquals(22222, self::$roomDb->getPoolId());
	}

}
