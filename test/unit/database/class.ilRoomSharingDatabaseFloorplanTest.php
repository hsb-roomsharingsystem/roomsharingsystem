<?php

chdir("../../../../../../../../"); // necessary for the include paths that are used within the classes to be tested
require_once("Customizing/global/plugins/Services/Repository/RepositoryObject/RoomSharing/classes/database/class.ilRoomSharingDatabaseFloorplan.php");
require_once("Customizing/global/plugins/Services/Repository/RepositoryObject/RoomSharing/classes/database/class.ilRoomSharingDBConstants.php");
require_once("Services/Database/classes/class.ilDBMySQL.php");

use ilRoomSharingDBConstants as dbc;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-12 at 09:19:03.
 */
class ilRoomSharingDatabaseFloorplanTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var ilRoomSharingDatabaseFloorplan
	 */
	private static $floorplanDb;
	private static $pool_id = 30;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$test = new ilRoomSharingDatabaseFloorplanTest();
		global $ilDB;
		$ilDB = $test->getMock('db',
			array('quote', 'query', 'fetchAssoc', 'in', 'prepare', 'execute', 'insert', 'nextId', 'getLastInsertId',
			'update', 'manipulate'), array(), '', false);
		self::$floorplanDb = new ilRoomSharingDatabaseFloorplan(self::$pool_id);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * @covers ilRoomSharingDatabaseFloorplan::getAllFloorplans
	 */
	public function testGetAllFloorplans()
	{
		global $ilDB;
		$expected = 'SELECT * FROM ' . dbc::FLOORPLANS_TABLE .
			' WHERE pool_id = ' . $ilDB->quote(self::$pool_id, 'integer') .
			' order by file_id DESC';
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$floorplanDb->getAllFloorplans();
	}

	/**
	 * @covers ilRoomSharingDatabaseFloorplan::getFloorplan
	 */
	public function testGetFloorplan()
	{
		global $ilDB;
		$expected = 'SELECT * FROM ' . dbc::FLOORPLANS_TABLE .
			' WHERE file_id = ' . $ilDB->quote(33, 'integer') .
			' AND pool_id = ' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$floorplanDb->getFloorplan(33);
	}

	/**
	 * @covers ilRoomSharingDatabaseFloorplan::getAllFloorplanIds
	 */
	public function testGetAllFloorplanIds()
	{
		global $ilDB;
		$expected = 'SELECT file_id FROM ' . dbc::FLOORPLANS_TABLE .
			' WHERE pool_id = ' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$floorplanDb->getAllFloorplanIds();
	}

	/**
	 * @covers ilRoomSharingDatabaseFloorplan::insertFloorplan
	 */
	public function testInsertFloorplan()
	{
		global $ilDB;
		$expected = array(
			'file_id' => array('integer', 33),
			'pool_id' => array('integer', self::$pool_id)
		);
		$ilDB->expects($this->once())->method('insert')->with($this->equalTo(dbc::FLOORPLANS_TABLE),
			$this->equalTo($expected));

		self::$floorplanDb->insertFloorplan(33);
	}

	/**
	 * @covers ilRoomSharingDatabaseFloorplan::deleteFloorplan
	 */
	public function testDeleteFloorplan()
	{
		global $ilDB;
		$expected = 'DELETE FROM ' . dbc::FLOORPLANS_TABLE .
			' WHERE file_id = ' . $ilDB->quote(33, 'integer') .
			' AND pool_id =' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('manipulate')->with($this->equalTo($expected));
		self::$floorplanDb->deleteFloorplan(33);
	}

	/**
	 * @covers ilRoomSharingDatabaseFloorplan::deleteFloorplanRoomAssociation
	 */
	public function testDeleteFloorplanRoomAssociation()
	{
		global $ilDB;
		$expected = 'UPDATE ' . dbc::ROOMS_TABLE .
			' SET file_id = 0 WHERE file_id = ' .
			$ilDB->quote(33, 'integer') .
			' AND pool_id =' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('manipulate')->with($this->equalTo($expected));
		self::$floorplanDb->deleteFloorplanRoomAssociation(33);
	}

	/**
	 * @covers ilRoomSharingDatabaseFloorplan::setPoolId
	 */
	public function testSetPoolId()
	{
		self::$floorplanDb->setPoolId(22222);
		$this->assertEquals(22222, self::$floorplanDb->getPoolId());
	}

}
