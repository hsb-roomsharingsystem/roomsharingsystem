<?php

chdir("../../../../../../../../"); // necessary for the include paths that are used within the classes to be tested
require_once("Customizing/global/plugins/Services/Repository/RepositoryObject/RoomSharing/classes/database/class.ilRoomSharingDatabase.php");
require_once("Customizing/global/plugins/Services/Repository/RepositoryObject/RoomSharing/classes/database/class.ilRoomSharingDBConstants.php");
require_once("Services/Database/classes/class.ilDBMySQL.php");

use ilRoomSharingDBConstants as dbc;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-12 at 09:21:43.
 */
class ilRoomSharingDatabaseTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var ilRoomSharingDatabase
	 */
	private static $db;
	private static $pool_id = 30;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$test = new ilRoomSharingDatabaseTest();
		global $ilDB;
//		$ilDB = $test->getMockBuilder('ilDBMySQL')
//				->setMethods(array())
//				->disableOriginalConstructor()->getMock();
		$ilDB = $test->getMock('db',
			array('quote', 'query', 'fetchAssoc', 'in', 'prepare', 'execute', 'insert', 'nextId', 'getLastInsertId',
			'update', 'manipulate'), array(), '', false);
		self::$db = new ilRoomSharingDatabase(self::$pool_id);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * @covers ilRoomSharingDatabase::deletePoolEntry
	 */
	public function testDeletePoolEntry()
	{
		global $ilDB;
		$expected = "DELETE FROM " . dbc::POOLS_TABLE .
			" WHERE id = " . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('manipulate')->with($this->equalTo($expected));
		self::$db->deletePoolEntry("SURE");

		$ilDB->expects($this->never())->method('manipulate');
		self::$db->deletePoolEntry("NOTSURE");
		self::$db->deletePoolEntry(null);
	}

	/**
	 * @covers ilRoomSharingDatabase::getRoomAgreementId
	 */
	public function testGetRoomAgreementId()
	{
		global $ilDB;
		$expected = 'SELECT * FROM ' . dbc::POOLS_TABLE .
			' WHERE id = ' . $ilDB->quote(self::$pool_id, 'integer') . ' order by rooms_agreement DESC';
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$db->getRoomAgreementId();
	}

	/**
	 * @covers ilRoomSharingDatabase::getUserById
	 */
	public function testGetUserById()
	{
		global $ilDB;
		$expected = 'SELECT firstname, lastname, login' . ' FROM usr_data' .
			' WHERE usr_id = ' . $ilDB->quote(33, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$db->getUserById(33);
	}

	/**
	 * @covers ilRoomSharingDatabase::getUserIdByUsername
	 * @todo   Implement testGetUserIdByUsername().
	 */
	public function testGetUserIdByUsername()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers ilRoomSharingDatabase::getMaxBookTime
	 * @todo   Implement testGetMaxBookTime().
	 */
	public function testGetMaxBookTime()
	{
		global $ilDB;
		$expected = 'SELECT max_book_time FROM ' . dbc::POOLS_TABLE .
			' WHERE id = ' . $ilDB->quote(self::$pool_id, 'integer');
		$ilDB->expects($this->once())->method('query')->with($this->equalTo($expected));
		self::$db->getMaxBookTime();
	}

}
